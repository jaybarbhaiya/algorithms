name: bench

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  bench:
    runs-on: ubuntu-latest
    steps:
      - name: git config
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      # - name: install build tooling
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install build-essential clang gnuplot -y

      # - name: setup rust
      #   uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable
      #     profile: minimal

      - name: checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install @actions/github

      - name: List tags
        id: list-tags
        run: |
          node -e "
          const { getOctokit, context } = require('@actions/github');
          const octokit = getOctokit(process.env.GITHUB_TOKEN);
          (async () => {
            const tags = await octokit.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const tagNames = tags.data.map(tag => tag.name);
            console.log('Tags in the repository:', tagNames);
            console.log('::set-output name=tags::' + JSON.stringify(tagNames));
          })();
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: matrix bench
      #   run: |
      #     git checkout main
      #     cargo bench

      - name: Run benchmarks
        run: |
          tags=${{ steps.list-tags.outputs.tags }}
          tags="${1:-${tags}}"
          IFS='|' read -r -a tags <<<"$tags"
          [[ ${#tags[@]} -eq 0 ]] && echo "no tags found" && exit 1
          for tag in ${tags[@]}; do
            echo "Tag: $tag"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: execute benchmark (pull_request)
      #   run: |
      #     git checkout ${{ github.head_ref }}
      #     cargo bench

      # - name: checkout gh-pages, copy and commit report to the branch
      #   run: |
      #     git checkout gh-pages
      #     cp -r target/criterion/ .
      #     git add .
      #     git commit -m "benchmark results"
      #     git push

